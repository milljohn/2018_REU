// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2018 14:04:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pwm_phase_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pwm_phase_control_vlg_sample_tst(
	button_down,
	button_up,
	clock,
	max_val,
	sampler_tx
);
input  button_down;
input  button_up;
input  clock;
input [31:0] max_val;
output sampler_tx;

reg sample;
time current_time;
always @(button_down or button_up or clock or max_val)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pwm_phase_control_vlg_check_tst (
	pwm_phase,
	sampler_rx
);
input [31:0] pwm_phase;
input sampler_rx;

reg [31:0] pwm_phase_expected;

reg [31:0] pwm_phase_prev;

reg [31:0] pwm_phase_expected_prev;

reg [31:0] last_pwm_phase_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	pwm_phase_prev = pwm_phase;
end

// update expected /o prevs

always @(trigger)
begin
	pwm_phase_expected_prev = pwm_phase_expected;
end


// expected pwm_phase[ 31 ]
initial
begin
	pwm_phase_expected[31] = 1'bX;
end 
// expected pwm_phase[ 30 ]
initial
begin
	pwm_phase_expected[30] = 1'bX;
end 
// expected pwm_phase[ 29 ]
initial
begin
	pwm_phase_expected[29] = 1'bX;
end 
// expected pwm_phase[ 28 ]
initial
begin
	pwm_phase_expected[28] = 1'bX;
end 
// expected pwm_phase[ 27 ]
initial
begin
	pwm_phase_expected[27] = 1'bX;
end 
// expected pwm_phase[ 26 ]
initial
begin
	pwm_phase_expected[26] = 1'bX;
end 
// expected pwm_phase[ 25 ]
initial
begin
	pwm_phase_expected[25] = 1'bX;
end 
// expected pwm_phase[ 24 ]
initial
begin
	pwm_phase_expected[24] = 1'bX;
end 
// expected pwm_phase[ 23 ]
initial
begin
	pwm_phase_expected[23] = 1'bX;
end 
// expected pwm_phase[ 22 ]
initial
begin
	pwm_phase_expected[22] = 1'bX;
end 
// expected pwm_phase[ 21 ]
initial
begin
	pwm_phase_expected[21] = 1'bX;
end 
// expected pwm_phase[ 20 ]
initial
begin
	pwm_phase_expected[20] = 1'bX;
end 
// expected pwm_phase[ 19 ]
initial
begin
	pwm_phase_expected[19] = 1'bX;
end 
// expected pwm_phase[ 18 ]
initial
begin
	pwm_phase_expected[18] = 1'bX;
end 
// expected pwm_phase[ 17 ]
initial
begin
	pwm_phase_expected[17] = 1'bX;
end 
// expected pwm_phase[ 16 ]
initial
begin
	pwm_phase_expected[16] = 1'bX;
end 
// expected pwm_phase[ 15 ]
initial
begin
	pwm_phase_expected[15] = 1'bX;
end 
// expected pwm_phase[ 14 ]
initial
begin
	pwm_phase_expected[14] = 1'bX;
end 
// expected pwm_phase[ 13 ]
initial
begin
	pwm_phase_expected[13] = 1'bX;
end 
// expected pwm_phase[ 12 ]
initial
begin
	pwm_phase_expected[12] = 1'bX;
end 
// expected pwm_phase[ 11 ]
initial
begin
	pwm_phase_expected[11] = 1'bX;
end 
// expected pwm_phase[ 10 ]
initial
begin
	pwm_phase_expected[10] = 1'bX;
end 
// expected pwm_phase[ 9 ]
initial
begin
	pwm_phase_expected[9] = 1'bX;
end 
// expected pwm_phase[ 8 ]
initial
begin
	pwm_phase_expected[8] = 1'bX;
end 
// expected pwm_phase[ 7 ]
initial
begin
	pwm_phase_expected[7] = 1'bX;
end 
// expected pwm_phase[ 6 ]
initial
begin
	pwm_phase_expected[6] = 1'bX;
end 
// expected pwm_phase[ 5 ]
initial
begin
	pwm_phase_expected[5] = 1'bX;
end 
// expected pwm_phase[ 4 ]
initial
begin
	pwm_phase_expected[4] = 1'bX;
end 
// expected pwm_phase[ 3 ]
initial
begin
	pwm_phase_expected[3] = 1'bX;
end 
// expected pwm_phase[ 2 ]
initial
begin
	pwm_phase_expected[2] = 1'bX;
end 
// expected pwm_phase[ 1 ]
initial
begin
	pwm_phase_expected[1] = 1'bX;
end 
// expected pwm_phase[ 0 ]
initial
begin
	pwm_phase_expected[0] = 1'bX;
end 
// generate trigger
always @(pwm_phase_expected or pwm_phase)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pwm_phase = %b | ",pwm_phase_expected_prev);
	$display("| real pwm_phase = %b | ",pwm_phase_prev);
`endif
	if (
		( pwm_phase_expected_prev[0] !== 1'bx ) && ( pwm_phase_prev[0] !== pwm_phase_expected_prev[0] )
		&& ((pwm_phase_expected_prev[0] !== last_pwm_phase_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[0] = pwm_phase_expected_prev[0];
	end
	if (
		( pwm_phase_expected_prev[1] !== 1'bx ) && ( pwm_phase_prev[1] !== pwm_phase_expected_prev[1] )
		&& ((pwm_phase_expected_prev[1] !== last_pwm_phase_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[1] = pwm_phase_expected_prev[1];
	end
	if (
		( pwm_phase_expected_prev[2] !== 1'bx ) && ( pwm_phase_prev[2] !== pwm_phase_expected_prev[2] )
		&& ((pwm_phase_expected_prev[2] !== last_pwm_phase_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[2] = pwm_phase_expected_prev[2];
	end
	if (
		( pwm_phase_expected_prev[3] !== 1'bx ) && ( pwm_phase_prev[3] !== pwm_phase_expected_prev[3] )
		&& ((pwm_phase_expected_prev[3] !== last_pwm_phase_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[3] = pwm_phase_expected_prev[3];
	end
	if (
		( pwm_phase_expected_prev[4] !== 1'bx ) && ( pwm_phase_prev[4] !== pwm_phase_expected_prev[4] )
		&& ((pwm_phase_expected_prev[4] !== last_pwm_phase_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[4] = pwm_phase_expected_prev[4];
	end
	if (
		( pwm_phase_expected_prev[5] !== 1'bx ) && ( pwm_phase_prev[5] !== pwm_phase_expected_prev[5] )
		&& ((pwm_phase_expected_prev[5] !== last_pwm_phase_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[5] = pwm_phase_expected_prev[5];
	end
	if (
		( pwm_phase_expected_prev[6] !== 1'bx ) && ( pwm_phase_prev[6] !== pwm_phase_expected_prev[6] )
		&& ((pwm_phase_expected_prev[6] !== last_pwm_phase_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[6] = pwm_phase_expected_prev[6];
	end
	if (
		( pwm_phase_expected_prev[7] !== 1'bx ) && ( pwm_phase_prev[7] !== pwm_phase_expected_prev[7] )
		&& ((pwm_phase_expected_prev[7] !== last_pwm_phase_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[7] = pwm_phase_expected_prev[7];
	end
	if (
		( pwm_phase_expected_prev[8] !== 1'bx ) && ( pwm_phase_prev[8] !== pwm_phase_expected_prev[8] )
		&& ((pwm_phase_expected_prev[8] !== last_pwm_phase_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[8] = pwm_phase_expected_prev[8];
	end
	if (
		( pwm_phase_expected_prev[9] !== 1'bx ) && ( pwm_phase_prev[9] !== pwm_phase_expected_prev[9] )
		&& ((pwm_phase_expected_prev[9] !== last_pwm_phase_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[9] = pwm_phase_expected_prev[9];
	end
	if (
		( pwm_phase_expected_prev[10] !== 1'bx ) && ( pwm_phase_prev[10] !== pwm_phase_expected_prev[10] )
		&& ((pwm_phase_expected_prev[10] !== last_pwm_phase_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[10] = pwm_phase_expected_prev[10];
	end
	if (
		( pwm_phase_expected_prev[11] !== 1'bx ) && ( pwm_phase_prev[11] !== pwm_phase_expected_prev[11] )
		&& ((pwm_phase_expected_prev[11] !== last_pwm_phase_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[11] = pwm_phase_expected_prev[11];
	end
	if (
		( pwm_phase_expected_prev[12] !== 1'bx ) && ( pwm_phase_prev[12] !== pwm_phase_expected_prev[12] )
		&& ((pwm_phase_expected_prev[12] !== last_pwm_phase_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[12] = pwm_phase_expected_prev[12];
	end
	if (
		( pwm_phase_expected_prev[13] !== 1'bx ) && ( pwm_phase_prev[13] !== pwm_phase_expected_prev[13] )
		&& ((pwm_phase_expected_prev[13] !== last_pwm_phase_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[13] = pwm_phase_expected_prev[13];
	end
	if (
		( pwm_phase_expected_prev[14] !== 1'bx ) && ( pwm_phase_prev[14] !== pwm_phase_expected_prev[14] )
		&& ((pwm_phase_expected_prev[14] !== last_pwm_phase_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[14] = pwm_phase_expected_prev[14];
	end
	if (
		( pwm_phase_expected_prev[15] !== 1'bx ) && ( pwm_phase_prev[15] !== pwm_phase_expected_prev[15] )
		&& ((pwm_phase_expected_prev[15] !== last_pwm_phase_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[15] = pwm_phase_expected_prev[15];
	end
	if (
		( pwm_phase_expected_prev[16] !== 1'bx ) && ( pwm_phase_prev[16] !== pwm_phase_expected_prev[16] )
		&& ((pwm_phase_expected_prev[16] !== last_pwm_phase_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[16] = pwm_phase_expected_prev[16];
	end
	if (
		( pwm_phase_expected_prev[17] !== 1'bx ) && ( pwm_phase_prev[17] !== pwm_phase_expected_prev[17] )
		&& ((pwm_phase_expected_prev[17] !== last_pwm_phase_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[17] = pwm_phase_expected_prev[17];
	end
	if (
		( pwm_phase_expected_prev[18] !== 1'bx ) && ( pwm_phase_prev[18] !== pwm_phase_expected_prev[18] )
		&& ((pwm_phase_expected_prev[18] !== last_pwm_phase_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[18] = pwm_phase_expected_prev[18];
	end
	if (
		( pwm_phase_expected_prev[19] !== 1'bx ) && ( pwm_phase_prev[19] !== pwm_phase_expected_prev[19] )
		&& ((pwm_phase_expected_prev[19] !== last_pwm_phase_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[19] = pwm_phase_expected_prev[19];
	end
	if (
		( pwm_phase_expected_prev[20] !== 1'bx ) && ( pwm_phase_prev[20] !== pwm_phase_expected_prev[20] )
		&& ((pwm_phase_expected_prev[20] !== last_pwm_phase_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[20] = pwm_phase_expected_prev[20];
	end
	if (
		( pwm_phase_expected_prev[21] !== 1'bx ) && ( pwm_phase_prev[21] !== pwm_phase_expected_prev[21] )
		&& ((pwm_phase_expected_prev[21] !== last_pwm_phase_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[21] = pwm_phase_expected_prev[21];
	end
	if (
		( pwm_phase_expected_prev[22] !== 1'bx ) && ( pwm_phase_prev[22] !== pwm_phase_expected_prev[22] )
		&& ((pwm_phase_expected_prev[22] !== last_pwm_phase_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[22] = pwm_phase_expected_prev[22];
	end
	if (
		( pwm_phase_expected_prev[23] !== 1'bx ) && ( pwm_phase_prev[23] !== pwm_phase_expected_prev[23] )
		&& ((pwm_phase_expected_prev[23] !== last_pwm_phase_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[23] = pwm_phase_expected_prev[23];
	end
	if (
		( pwm_phase_expected_prev[24] !== 1'bx ) && ( pwm_phase_prev[24] !== pwm_phase_expected_prev[24] )
		&& ((pwm_phase_expected_prev[24] !== last_pwm_phase_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[24] = pwm_phase_expected_prev[24];
	end
	if (
		( pwm_phase_expected_prev[25] !== 1'bx ) && ( pwm_phase_prev[25] !== pwm_phase_expected_prev[25] )
		&& ((pwm_phase_expected_prev[25] !== last_pwm_phase_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[25] = pwm_phase_expected_prev[25];
	end
	if (
		( pwm_phase_expected_prev[26] !== 1'bx ) && ( pwm_phase_prev[26] !== pwm_phase_expected_prev[26] )
		&& ((pwm_phase_expected_prev[26] !== last_pwm_phase_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[26] = pwm_phase_expected_prev[26];
	end
	if (
		( pwm_phase_expected_prev[27] !== 1'bx ) && ( pwm_phase_prev[27] !== pwm_phase_expected_prev[27] )
		&& ((pwm_phase_expected_prev[27] !== last_pwm_phase_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[27] = pwm_phase_expected_prev[27];
	end
	if (
		( pwm_phase_expected_prev[28] !== 1'bx ) && ( pwm_phase_prev[28] !== pwm_phase_expected_prev[28] )
		&& ((pwm_phase_expected_prev[28] !== last_pwm_phase_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[28] = pwm_phase_expected_prev[28];
	end
	if (
		( pwm_phase_expected_prev[29] !== 1'bx ) && ( pwm_phase_prev[29] !== pwm_phase_expected_prev[29] )
		&& ((pwm_phase_expected_prev[29] !== last_pwm_phase_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[29] = pwm_phase_expected_prev[29];
	end
	if (
		( pwm_phase_expected_prev[30] !== 1'bx ) && ( pwm_phase_prev[30] !== pwm_phase_expected_prev[30] )
		&& ((pwm_phase_expected_prev[30] !== last_pwm_phase_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[30] = pwm_phase_expected_prev[30];
	end
	if (
		( pwm_phase_expected_prev[31] !== 1'bx ) && ( pwm_phase_prev[31] !== pwm_phase_expected_prev[31] )
		&& ((pwm_phase_expected_prev[31] !== last_pwm_phase_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_phase[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_phase_expected_prev);
		$display ("     Real value = %b", pwm_phase_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_phase_exp[31] = pwm_phase_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pwm_phase_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_down;
reg button_up;
reg clock;
reg [31:0] max_val;
// wires                                               
wire [31:0] pwm_phase;

wire sampler;                             

// assign statements (if any)                          
pwm_phase_control i1 (
// port map - connection between master ports and signals/registers   
	.button_down(button_down),
	.button_up(button_up),
	.clock(clock),
	.max_val(max_val),
	.pwm_phase(pwm_phase)
);

// button_down
initial
begin
	button_down = 1'b0;
end 

// button_up
initial
begin
	button_up = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// max_val[ 31 ]
initial
begin
	max_val[31] = 1'b0;
end 
// max_val[ 30 ]
initial
begin
	max_val[30] = 1'b0;
end 
// max_val[ 29 ]
initial
begin
	max_val[29] = 1'b0;
end 
// max_val[ 28 ]
initial
begin
	max_val[28] = 1'b0;
end 
// max_val[ 27 ]
initial
begin
	max_val[27] = 1'b0;
end 
// max_val[ 26 ]
initial
begin
	max_val[26] = 1'b0;
end 
// max_val[ 25 ]
initial
begin
	max_val[25] = 1'b0;
end 
// max_val[ 24 ]
initial
begin
	max_val[24] = 1'b0;
end 
// max_val[ 23 ]
initial
begin
	max_val[23] = 1'b0;
end 
// max_val[ 22 ]
initial
begin
	max_val[22] = 1'b0;
end 
// max_val[ 21 ]
initial
begin
	max_val[21] = 1'b0;
end 
// max_val[ 20 ]
initial
begin
	max_val[20] = 1'b0;
end 
// max_val[ 19 ]
initial
begin
	max_val[19] = 1'b0;
end 
// max_val[ 18 ]
initial
begin
	max_val[18] = 1'b0;
end 
// max_val[ 17 ]
initial
begin
	max_val[17] = 1'b0;
end 
// max_val[ 16 ]
initial
begin
	max_val[16] = 1'b0;
end 
// max_val[ 15 ]
initial
begin
	max_val[15] = 1'b0;
end 
// max_val[ 14 ]
initial
begin
	max_val[14] = 1'b0;
end 
// max_val[ 13 ]
initial
begin
	max_val[13] = 1'b0;
end 
// max_val[ 12 ]
initial
begin
	max_val[12] = 1'b0;
end 
// max_val[ 11 ]
initial
begin
	max_val[11] = 1'b0;
end 
// max_val[ 10 ]
initial
begin
	max_val[10] = 1'b0;
end 
// max_val[ 9 ]
initial
begin
	max_val[9] = 1'b1;
end 
// max_val[ 8 ]
initial
begin
	max_val[8] = 1'b1;
end 
// max_val[ 7 ]
initial
begin
	max_val[7] = 1'b1;
end 
// max_val[ 6 ]
initial
begin
	max_val[6] = 1'b1;
end 
// max_val[ 5 ]
initial
begin
	max_val[5] = 1'b1;
end 
// max_val[ 4 ]
initial
begin
	max_val[4] = 1'b0;
end 
// max_val[ 3 ]
initial
begin
	max_val[3] = 1'b1;
end 
// max_val[ 2 ]
initial
begin
	max_val[2] = 1'b0;
end 
// max_val[ 1 ]
initial
begin
	max_val[1] = 1'b0;
end 
// max_val[ 0 ]
initial
begin
	max_val[0] = 1'b0;
end 

pwm_phase_control_vlg_sample_tst tb_sample (
	.button_down(button_down),
	.button_up(button_up),
	.clock(clock),
	.max_val(max_val),
	.sampler_tx(sampler)
);

pwm_phase_control_vlg_check_tst tb_out(
	.pwm_phase(pwm_phase),
	.sampler_rx(sampler)
);
endmodule

